/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get deployment plan
         * @description Retrieve the current deployment plan with stages and SLOs
         */
        get: operations["getPlan"];
        put?: never;
        /**
         * Update deployment plan
         * @description Create or update the deployment plan configuration
         */
        post: operations["updatePlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List releases
         * @description Get a list of all releases including current and completed ones
         */
        get: operations["listReleases"];
        put?: never;
        /**
         * Create release
         * @description Create a new release. Only one release can be staged at a time
         */
        post: operations["createRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active release
         * @description Retrieve the active release, or null if no active release exists
         */
        get: operations["getActiveRelease"];
        put?: never;
        /**
         * Control active release execution
         * @description Start or stop the active release
         */
        post: operations["controlActiveRelease"];
        /**
         * Delete active release
         * @description Delete the active release if it is in 'not_started' state
         */
        delete: operations["deleteActiveRelease"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release/{releaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get release details
         * @description Retrieve release state, plan record, and stage information
         */
        get: operations["getRelease"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stage/{stageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stage status
         * @description Get the current state of a specific stage
         */
        get: operations["getStage"];
        put?: never;
        /**
         * Progress stage
         * @description Advance a stage by approving or denying it
         */
        post: operations["progressStage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "order": 0,
         *       "description": "",
         *       "target_percent": 25,
         *       "soak_time": 10,
         *       "auto_progress": true
         *     } */
        PlanStage: {
            /** @description order of the stage in the plan */
            order: number;
            description?: string;
            /** @description target percentage of traffic that goes to the new Worker version */
            target_percent: number;
            /** @description soak time in seconds */
            soak_time: number;
            /** @description whether the stage automatically progresses or if it needs a human to manually progress it */
            auto_progress: boolean;
        };
        /** @example {
         *       "id": "release-1a2b3c4d-order-2",
         *       "order": 2,
         *       "releaseId": "1a2b3c4d",
         *       "state": "queued",
         *       "time_started": "2023-01-01T00:00:00Z",
         *       "time_elapsed": 0,
         *       "time_done": "2023-01-01T00:00:00Z",
         *       "logs": ""
         *     } */
        ReleaseStage: {
            id: string;
            /** @description order of the stage in the release */
            order: number;
            /** @description id of the release */
            releaseId: string;
            /**
             * @description state of the stage
             * @enum {string}
             */
            state: "queued" | "awaiting_approval" | "running" | "done_failed" | "done_successful" | "done_cancelled" | "error";
            /** Format: date-time */
            time_started: string;
            time_elapsed: number;
            /** Format: date-time */
            time_done: string;
            logs: string;
        };
        /** @example {
         *       "id": "b2a2c3d4e5f6a1b2d3d5e5f6a1b2c3d5",
         *       "state": "not_started",
         *       "plan_record": {
         *         "$ref": "#/components/schemas/Plan"
         *       },
         *       "old_version": "fa2c3d4e5a6a1b2d3d5e5f6a1b2c3d5",
         *       "new_version": "e1a2c3d4e5f6a1b2d3d5e5f6a1b2c3d5",
         *       "stages": {
         *         "type": "array",
         *         "items": {
         *           "$ref": "#/components/schemas/StageId"
         *         }
         *       },
         *       "time_started": {
         *         "type": "string",
         *         "format": "date-time"
         *       },
         *       "time_elapsed": {
         *         "type": "integer"
         *       },
         *       "time_done": {
         *         "type": "string",
         *         "format": "date-time"
         *       }
         *     } */
        Release: {
            id: string;
            /** @enum {string} */
            state: "not_started" | "running" | "done_stopped_manually" | "done_failed_slo" | "done_successful" | "error";
            plan_record: components["schemas"]["Plan"];
            old_version: string;
            new_version: string;
            stages: components["schemas"]["StageId"][];
            /** Format: date-time */
            time_created: string;
            /** Format: date-time */
            time_started: string;
            time_elapsed: number;
            /** Format: date-time */
            time_done: string;
        };
        StageId: {
            id: string;
            order: number;
        };
        /** @example {
         *       "stages": [
         *         {
         *           "$ref": "#/components/schemas/PlanStage"
         *         }
         *       ],
         *       "slos": [
         *         {
         *           "$ref": "#/components/schemas/SLO"
         *         }
         *       ],
         *       "worker_name": "my-worker"
         *     } */
        Plan: {
            stages: components["schemas"]["PlanStage"][];
            slos: components["schemas"]["SLO"][];
            /** Format: date-time */
            readonly time_last_saved?: string;
            worker_name: string;
        };
        /** @example {
         *       "value": "latency p99 100"
         *     } */
        SLO: {
            value: string;
        };
        /**
         * @description Standard error response format
         * @example {
         *       "message": "Invalid request",
         *       "ok": false
         *     }
         */
        Error: {
            /** @description Error message describing what went wrong */
            message: string;
            /**
             * @description Always false for error responses
             * @enum {boolean}
             */
            ok: false;
        };
    };
    responses: never;
    parameters: {
        stageId: string;
        releaseId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Plan retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Plan"];
                };
            };
            /** @description Plan not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Plan"];
            };
        };
        responses: {
            /** @description Plan updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Plan"];
                };
            };
            /** @description Plan is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listReleases: {
        parameters: {
            query?: {
                /** @description Maximum number of releases to return (default 50, max 100) */
                limit?: number;
                /** @description Number of releases to skip for pagination (default 0) */
                offset?: number;
                /** @description Filter releases created after this timestamp (ISO 8601 format) */
                since?: string;
                /** @description Filter releases created before this timestamp (ISO 8601 format) */
                until?: string;
                /** @description Filter releases by state */
                state?: "not_started" | "running" | "done_successful" | "done_stopped_manually" | "done_failed_slo";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of releases retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"][];
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Release created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"];
                };
            };
            /** @description Release cannot be created from the plan */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description A release is already staged */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getActiveRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success (returns active release or null) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"] | null;
                };
            };
        };
    };
    controlActiveRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The command to execute on the active release
                     * @enum {string}
                     */
                    command: "start" | "stop";
                    /** @description Cloudflare Account ID */
                    account_id?: string;
                    /** @description Cloudflare API Token for authentication */
                    api_token?: string;
                };
            };
        };
        responses: {
            /** @description start or stop was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description The provided command is not valid for the release in its current state */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description No active release found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteActiveRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Release deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description No active release found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Release has to be in a "not_started" state */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getRelease: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                releaseId: components["parameters"]["releaseId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Release details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"];
                };
            };
            /** @description Release not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stageId: components["parameters"]["stageId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the Stage info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReleaseStage"];
                };
            };
            /** @description Stage not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    progressStage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stageId: components["parameters"]["stageId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/text": "approve" | "deny";
            };
        };
        responses: {
            /** @description Successfully progressed the stage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid command */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Stage not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
